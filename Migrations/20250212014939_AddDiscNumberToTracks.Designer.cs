// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicServer.Data;

#nullable disable

namespace audiarr.Migrations
{
    [DbContext(typeof(MusicDbContext))]
    [Migration("20250212014939_AddDiscNumberToTracks")]
    partial class AddDiscNumberToTracks
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.1");

            modelBuilder.Entity("MusicServer.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ArtistId1")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CoverArtUrl")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Genre")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("ArtistId1");

                    b.HasIndex("ReleaseYear")
                        .HasDatabaseName("idx_albums_releaseyear");

                    b.HasIndex("Name", "ArtistId")
                        .IsUnique()
                        .HasDatabaseName("idx_albums_name_artist");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("MusicServer.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .HasDatabaseName("idx_artists_name");

                    b.HasIndex("SortName")
                        .HasDatabaseName("idx_artists_sortname");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MusicServer.Models.ServerSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ServerSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ServerName = "Audiarr"
                        });
                });

            modelBuilder.Entity("MusicServer.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AlbumId1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Bitrate")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DiscNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FileFormat")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("idx_tracks_album");

                    b.HasIndex("AlbumId1");

                    b.HasIndex("ArtistId")
                        .HasDatabaseName("idx_tracks_artist");

                    b.HasIndex("FilePath")
                        .HasDatabaseName("idx_tracks_filename");

                    b.HasIndex("Id")
                        .HasDatabaseName("idx_tracks_stream");

                    b.HasIndex("Title")
                        .HasDatabaseName("idx_tracks_title");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("MusicServer.Models.Album", b =>
                {
                    b.HasOne("MusicServer.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicServer.Models.Artist", null)
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId1");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicServer.Models.Track", b =>
                {
                    b.HasOne("MusicServer.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MusicServer.Models.Album", null)
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId1");

                    b.HasOne("MusicServer.Models.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("MusicServer.Models.Album", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("MusicServer.Models.Artist", b =>
                {
                    b.Navigation("Albums");
                });
#pragma warning restore 612, 618
        }
    }
}
